// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.get('playerHand').on('stand', (function(_this) {
        return function() {
          return _this.dealerStartTurn();
        };
      })(this));
      this.get('dealerHand').on('stand', (function(_this) {
        return function() {
          return _this.checkWinner();
        };
      })(this));
      this.get('playerHand').on('bust', (function(_this) {
        return function(player) {
          console.log("bust");
          return _this.bust(player);
        };
      })(this));
      return this.get('dealerHand').on('bust', (function(_this) {
        return function(dealer) {
          return _this.bust(dealer);
        };
      })(this));
    };

    App.prototype.endTurn = function() {
      return null;
    };

    App.prototype.bust = function(hand) {
      console.log('bust');
      hand.winState = 'Bust';
      if (hand === this.get('playerHand')) {
        this.get('dealerHand').wins();
      } else {
        hand.wins();
      }
      return this.ends();
    };

    App.prototype.dealerStartTurn = function() {
      var dh;
      dh = this.get('dealerHand');
      dh.at(0).flip();
      while (dh.getScore() < 17) {
        dh.hit();
      }
      return dh.stand();
    };

    App.prototype.checkWinner = function() {
      var dealer, player;
      console.log("everyone wins!");
      dealer = this.get('dealerHand');
      player = this.get('playerHand');
      if (dealer.getScore() > player.getScore()) {
        dealer.wins();
      } else {
        player.wins();
      }
      return this.ends();
    };

    App.prototype.ends = function() {
      return alert("yay, someone won!");
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
